using RabbitMQ.Client;
using System.Text;
using System.Text.Json;
using WebAPI.Domain.Interfaces.Service;
using WebAPI.Services.DTO;

namespace WebAPI.Services
{
    public class ToDoService : IToDoService
    {
        private readonly ILogger<ToDoService> _logger;



        public ToDoService(ILogger<ToDoService> logger)
        {
            _logger = logger;
        }

        public void CreateToDo(ToDoDTO obj)
        {
            // DJ -> MOVER PARA ARQUIVO DE CONFIGURACAO
            var factory = new ConnectionFactory
            {
                HostName = "10.10.0.3",
                UserName = "guest",
                Password = "guest",
                Port = 5672
            };

            // consistir os dados recebidos

            using (IConnection connection = factory.CreateConnection())
            using (IModel channel = connection.CreateModel())
            {
                channel.QueueDeclare(
                    queue: "taskQueue",
                    durable: false,
                    exclusive: false,
                    autoDelete: false,
                    arguments: null);

                string message = JsonSerializer.Serialize(obj);
                var body = Encoding.UTF8.GetBytes(message);

                channel.BasicPublish(
                    exchange: "",
                    routingKey: "taskQueue",
                    basicProperties: null,
                    body: body);

                _logger.LogInformation($"ToDo enqueued:\n {message}");
            }
        }

        public IEnumerable<ToDoDTO> GetAllToDos()
        {
            throw new NotImplementedException();
        }

        public ToDoDTO GetToDoById(int id)
        {
            // DJ IMPLEMENTAR
            throw new NotImplementedException();
        }

        public void UpdateToDo(int id, ToDoDTO obj)
        {
            // DJ IMPLEMENTAR
            throw new NotImplementedException();
        }

        public void DeleteToDo(int id)
        {
            // DJ IMPLEMENTAR
            throw new NotImplementedException();
        }
    }
}
